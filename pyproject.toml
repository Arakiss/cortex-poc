[tool.poetry]
name = "cortex"
version = "0.1.0"
description = "AI-powered agent system for RODELA platform enhancing security analysis and automated response capabilities"
authors = ["Petru Arakiss <petruarakiss@gmail.com>"]
readme = "README.md"
license = "Proprietary"
packages = [{ include = "cortex" }]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.9.2"
typing-extensions = "^4.12.2"
openai = "^1.52.2"
sortedcontainers = "^2.4.0"
rich = "^13.9.3"
fastapi = "^0.115.4"
uvicorn = "^0.32.0"
numpy = "^2.1.3"
aiofiles = "^24.1.0"
polars = "^1.12.0"
python-dotenv = "^1.0.1"
pydantic-settings = "^2.6.1"
humanize = "^4.11.0"
click = "^8.1.7"


[tool.poetry.group.dev.dependencies]
pytest = "^8.3.3"
mypy = "^1.13.0"
ruff = "^0.7.1"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.mypy]
python_version = "3.11"
strict = true
warn_return_any = true
warn_unused_configs = true

[tool.ruff]
line-length = 100
select = [
    "E", # pycodestyle errors
    "F", # pyflakes
    "B", # flake8-bugbear
]
ignore = [
    "B904", # Allow raising without from in except blocks
    "E501", # Line length is handled by formatter
]
exclude = [".git", ".ruff_cache", ".venv", "__pycache__", "build", "dist"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["E501"]

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
pythonpath = ["."]
asyncio_default_fixture_loop_scope = "function"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["cortex"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
